var documenterSearchIndex = {"docs":
[{"location":"shearcorrect/#Shear-Correction-Wrapper-API","page":"Shear Correction Wrapper API","title":"Shear Correction Wrapper API","text":"","category":"section"},{"location":"shearcorrect/","page":"Shear Correction Wrapper API","title":"Shear Correction Wrapper API","text":"shear_correction_nrrd!","category":"page"},{"location":"shearcorrect/#ImageDataIO.shear_correction_nrrd!","page":"Shear Correction Wrapper API","title":"ImageDataIO.shear_correction_nrrd!","text":"shear_correction_nrrd!(param_path::Dict, param::Dict, ch::Int, shear_params_dict::Dict;         vmax::Int=1600, nrrd_in_key::String=\"path_dir_nrrd\", nrrd_out_key::String=\"path_dir_nrrd_shearcorrect\",         MIP_out_key::String=\"path_dir_MIP_shearcorrect\")\n\nApplies shear correction to a dataset.\n\nArguments\n\nparam_path::Dict: Dictionary containing locations of input and output directories with NRRD files\nparam::Dict: Dictionary containing image dimension parameters x_range, y_range, z_range, and t_range\nch: Channel to apply shear correction to\nshear_params_dict::Dict: Dictionary of shear correction parameters. If nonempty, those parameters will be used.  If empty, it will be filled with the computed paramers.\nvmax::Int (optional, default 1600): Contrast parameter for png files\nnrrd_in_key::String (optional): Key in param_path containing input NRRD directory\nNRRD_out_key::String (optional): Key in param_path containing output NRRD directory\nMIP_out_key::String (optional): Key in param_path containing output MIP directory\n\n\n\n\n\n","category":"function"},{"location":"nrrdfilter/#MHD-Filtering-Wrapper-API","page":"MHD Filtering Wrapper API","title":"MHD Filtering Wrapper API","text":"","category":"section"},{"location":"nrrdfilter/","page":"MHD Filtering Wrapper API","title":"MHD Filtering Wrapper API","text":"filter_nrrd_gpu","category":"page"},{"location":"nrrdfilter/#ImageDataIO.filter_nrrd_gpu","page":"MHD Filtering Wrapper API","title":"ImageDataIO.filter_nrrd_gpu","text":"filter_nrrd_gpu(param_path::Dict, path_dir_nrrd::String, t_range, list_ch,     f_basename::Function; nrrd_filt_dir_key::String=\"path_dir_nrrd_filt\",      mip_filt_dir_key::String=\"path_dir_MIP_filt\", vmax=1600)\n\nRuns total variation filtering on a set of images.\n\nArguments\n\nparam_path::Dict: Dictionary of locations of data\npath_dir_nrrd::String: Location of NRRD files to filter\nt_range: Time points to filter\nlist_ch: Channels to filter\nf_basename::Function: Function that returns NRRD filename given time point and channel\nnrrd_filt_dir_key::String (optional): Key in param_path that maps to the location to store\n\nthe output NRRD files. Default path_dir_nrrd_filt\n\nmip_filt_dir_key::String (optional): Key in param_path that maps to the location to store\n\nthe output MIP files. Default path_dir_MIP_filt\n\nvmax: Contrast setting for png files\n\n\n\n\n\n","category":"function"},{"location":"dictionary/#Dictionary-IO-API","page":"Dictionary IO API","title":"Dictionary IO API","text":"","category":"section"},{"location":"dictionary/","page":"Dictionary IO API","title":"Dictionary IO API","text":"add_get_basename!\nchange_rootpath!\nwrite_dict\nread_2d_dict\nparse_1d_tuple\nparse_1d_dict\nsplit_arrays\nmulti_index_array\nextract_key","category":"page"},{"location":"dictionary/#ImageDataIO.add_get_basename!","page":"Dictionary IO API","title":"ImageDataIO.add_get_basename!","text":"add_get_basename!(param_path::Dict)\n\nAdds get_basename key to the dictionary param_path.\n\n\n\n\n\nadd_get_basename!(param_path::Dict, param::Dict)\n\nAdds get_basename key to the dictionary param_path, given information about multiple dataset timing in param.\n\n\n\n\n\n","category":"function"},{"location":"dictionary/#ImageDataIO.change_rootpath!","page":"Dictionary IO API","title":"ImageDataIO.change_rootpath!","text":"change_rootpath!(param_path::Dict, new_rootpath::String)\n\nUpdates a dictionary of paths param_path by changing the old rootpath to the new_rootpath\n\n\n\n\n\n","category":"function"},{"location":"dictionary/#ImageDataIO.write_dict","page":"Dictionary IO API","title":"ImageDataIO.write_dict","text":"write_dict(dict, out::AbstractString; kv_delimiter::AbstractString=\" \", kk_delimiter::AbstractString=\" \")\n\nWrites a dictionary to a file.\n\nArguments\n\ndict: Dictionary to write\nout::AbstractString: filename to write to\nkv_delimiter::AbstractString (optional, default \" \") delimiter between keys and values\nkk_delimiter::AbstractString (optional, default \"\n\n\") delimiter between subsequent keys\n\n\n\n\n\n","category":"function"},{"location":"dictionary/#ImageDataIO.read_2d_dict","page":"Dictionary IO API","title":"ImageDataIO.read_2d_dict","text":"read_2d_dict(input::AbstractString, outer_key_dtype::Type, inner_key_dtype::Type, val_dtype::Type)\n\nReads 2D dictionary (dictionary of dictionaries) from a file.\n\nArguments\n\ninput::AbstractString: input file\nouter_key_dtype::Type: data type of outer keys\ninner_key_dtype::Type: data type of inner keys\nval_dtype::Type: data type of values of inner dict\n\n\n\n\n\n","category":"function"},{"location":"dictionary/#ImageDataIO.parse_1d_tuple","page":"Dictionary IO API","title":"ImageDataIO.parse_1d_tuple","text":"parse_1d_tuple(tuple_str::AbstractString, dtype::Type)\n\nParses one-dimensional string tuple tuple_str::AbstractString into a tuple of the specified dtype::Type\n\n\n\n\n\n","category":"function"},{"location":"dictionary/#ImageDataIO.parse_1d_dict","page":"Dictionary IO API","title":"ImageDataIO.parse_1d_dict","text":"parse_1d_dict(dict_str::AbstractString, key_dtype::Type, val_dtype::Type)\n\nParses a 1D dictionary; the keys and values must be at most 1D arrays. Arguments:\n\ndict_str::AbstractString: string representation of dictionary to parse\nkey_dtype::Type: element data type of dictionary keys\nval_dtype::Type: element data type of dictionary values\n\n\n\n\n\n","category":"function"},{"location":"dictionary/#ImageDataIO.split_arrays","page":"Dictionary IO API","title":"ImageDataIO.split_arrays","text":"split_arrays(arrays::AbstractString; fwd_delimiters=['[', '('], back_delimiters=[')', ']'], val_delimiters=[','], ignore_chars=[' ', ' '])\n\nParses a string multi-dimensional array or list of arrays arrays::AbstractString into its component arrays.\n\nArguments\n\narrays::AbstractString: string of arrays to parse\n\nOptional keyword arguments\n\nfwd_delimiters: list of characters to delineate when an array starts\nback_delimiters: list of characters to delineate when an array ends\nval_delimiters: list of characters to delineate separating values of the array\nignore_chars: list of characters to ignore and not put in the final array\n\n\n\n\n\n","category":"function"},{"location":"dictionary/#ImageDataIO.multi_index_array","page":"Dictionary IO API","title":"ImageDataIO.multi_index_array","text":"multi_index_array(array, index)\n\nIndexes a nested array at index as though the array was a mulit-dimensional array.\n\n\n\n\n\n","category":"function"},{"location":"dictionary/#ImageDataIO.extract_key","page":"Dictionary IO API","title":"ImageDataIO.extract_key","text":"extract_key(dict, key, n::Integer, extract::Bool)\n\nAdds or retrieves a key from a given layer of a nested dictionary.\n\nArguments\n\ndict: Dictionary to operate on\nkey: Key to interact with\nn::Integer: The layer of the dictionary to interact with\nextract::Bool: If true, extracts the key from the dictionary; if false, adds the key to the dictionary instead.\n\n\n\n\n\n","category":"function"},{"location":"file/#File-IO-API","page":"File IO API","title":"File IO API","text":"","category":"section"},{"location":"file/#Basic-File-Operations","page":"File IO API","title":"Basic File Operations","text":"","category":"section"},{"location":"file/","page":"File IO API","title":"File IO API","text":"back_one_dir\nget_filename","category":"page"},{"location":"file/#ImageDataIO.back_one_dir","page":"File IO API","title":"ImageDataIO.back_one_dir","text":"back_one_dir(dir)\n\nGiven a directory as input, outputs the parent directory.\n\n\n\n\n\n","category":"function"},{"location":"file/#ImageDataIO.get_filename","page":"File IO API","title":"ImageDataIO.get_filename","text":"get_filename(path_to_file)\n\nGiven path to a file, outputs the filename.\n\n\n\n\n\n","category":"function"},{"location":"file/#Head-Position-File-IO","page":"File IO API","title":"Head Position File IO","text":"","category":"section"},{"location":"file/","page":"File IO API","title":"File IO API","text":"read_head_pos","category":"page"},{"location":"file/#ImageDataIO.read_head_pos","page":"File IO API","title":"ImageDataIO.read_head_pos","text":"function read_head_pos(head_path::String)\n\nReads the worm head position from the file head_path::String. Returns a dictionary mapping frame => head position of the worm at that frame.\n\n\n\n\n\n","category":"function"},{"location":"file/#Registration-File-IO","page":"File IO API","title":"Registration File IO","text":"","category":"section"},{"location":"file/","page":"File IO API","title":"File IO API","text":"load_registration_problems\nmodify_parameter_file\nread_parameter_file","category":"page"},{"location":"file/#ImageDataIO.load_registration_problems","page":"File IO API","title":"ImageDataIO.load_registration_problems","text":"load_registration_problems(edge_file_paths::Array{String,1})\n\nLoads a set of registration problems into an array.\n\nArguments:\n\nedge_file_paths::Array{String, 1}: paths containing registration problems\n\n\n\n\n\n","category":"function"},{"location":"file/#ImageDataIO.modify_parameter_file","page":"File IO API","title":"ImageDataIO.modify_parameter_file","text":"function modify_parameter_file(param_in::String, param_out::String, substitutions::Dict; is_universal=false) Modifies an elastix transform parameter file.\n\nArguments\n\nparam_in::String: Path to parameter file to modify\nparam_out::String: Path to modified parameter file output\nsubstitutions::Dict: Dictionary of substitutions. For each key in substitutions, if it is a key in the parameter file, replace its value with the value in substitutions.\nis_universal::Bool (optional):  If set to true, instead find/replace all instances of keys in substitutions regardless of if it is a key in the parameter file\n\n\n\n\n\n","category":"function"},{"location":"file/#ImageDataIO.read_parameter_file","page":"File IO API","title":"ImageDataIO.read_parameter_file","text":"read_parameter_file(parameter_file_path::String, key::String, dtype::Type)\n\nReads a value from a paremeter file.\n\nArguments\n\nparameter_fiile_path::String: Path to parameter file\nkey::String: Value to read\ndtype::Type: Type of the value or elements of value (if it's an array)\n\n\n\n\n\n","category":"function"},{"location":"file/#NRRD-File-IO","page":"File IO API","title":"NRRD File IO","text":"","category":"section"},{"location":"file/","page":"File IO API","title":"File IO API","text":"read_nrrd","category":"page"},{"location":"file/#ImageDataIO.read_nrrd","page":"File IO API","title":"ImageDataIO.read_nrrd","text":"read_nrrd(rootpath, img_prefix, nrrd_path, frame, channel)\n\nReads NRRD file from $(rootpath)/$(nrrd_path)/$(img_prefix)_t$(channel).nrrd and outputs resulting image.\n\n\n\n\n\n","category":"function"},{"location":"file/#Activity-IO","page":"File IO API","title":"Activity IO","text":"","category":"section"},{"location":"file/","page":"File IO API","title":"File IO API","text":"read_activity\nwrite_activity","category":"page"},{"location":"file/#ImageDataIO.read_activity","page":"File IO API","title":"ImageDataIO.read_activity","text":"read_activity(input)\n\nReads ROI activities from input.\n\n\n\n\n\n","category":"function"},{"location":"file/#ImageDataIO.write_activity","page":"File IO API","title":"ImageDataIO.write_activity","text":"write_activity(activity, out)\n\nWrites list of ROI activities activity to output file out.\n\n\n\n\n\n","category":"function"},{"location":"file/#Centroids-File-IO","page":"File IO API","title":"Centroids File IO","text":"","category":"section"},{"location":"file/","page":"File IO API","title":"File IO API","text":"write_centroids\nread_centroids_transformix\nread_centroids_roi","category":"page"},{"location":"file/#ImageDataIO.write_centroids","page":"File IO API","title":"ImageDataIO.write_centroids","text":"write_centroids(centroids, out)\n\nWrites centroids to transformix-compatible file out\n\n\n\n\n\n","category":"function"},{"location":"file/#ImageDataIO.read_centroids_transformix","page":"File IO API","title":"ImageDataIO.read_centroids_transformix","text":"read_centroids_transformix(input)\n\nReads centroids from transformix output file input\n\n\n\n\n\n","category":"function"},{"location":"file/#ImageDataIO.read_centroids_roi","page":"File IO API","title":"ImageDataIO.read_centroids_roi","text":"read_centroids_roi(input)\n\nReads centroids from write_centroids output file input\n\n\n\n\n\n","category":"function"},{"location":"file/#UNet-IO","page":"File IO API","title":"UNet IO","text":"","category":"section"},{"location":"file/","page":"File IO API","title":"File IO API","text":"load_training_set\nload_predictions\nresample_img","category":"page"},{"location":"file/#ImageDataIO.load_training_set","page":"File IO API","title":"ImageDataIO.load_training_set","text":"load_training_set(h5_file::String)\n\nLoads training (or validation dataset) in 3D dataset h5_file::String. Returns raw, label, and weight fields.\n\n\n\n\n\n","category":"function"},{"location":"file/#ImageDataIO.load_predictions","page":"File IO API","title":"ImageDataIO.load_predictions","text":"load_predictions(h5_file::String; threshold=nothing)\n\nLoads UNet predictions in 3D dataset h5_file::String. If the file has a fourth dimension, assumes predictions are stored in its second entry. Returns the portion of predictions field corresponding to foreground. Can optionally set threshold to binarize predictions.\n\n\n\n\n\n","category":"function"},{"location":"file/#ImageDataIO.resample_img","page":"File IO API","title":"ImageDataIO.resample_img","text":"resample_img(img, scales; dtype=\"raw\")\n\nScales an image down by using linear interpolation for the raw image, and bkg-gap priority interpoalation for the labels.\n\nArguments\n\nimg: image to scale\nscales: array of factors to scale down (bin) by in each dimension. Must be positive. \n\nOptional keyword arguments\n\ndtype::String: type of data - either \"raw\", \"label\", or \"weight\". Default raw.\n\n\n\n\n\n","category":"function"},{"location":"#ImageDataIO.jl-Documentation","page":"ImageDataIO.jl Documentation","title":"ImageDataIO.jl Documentation","text":"","category":"section"},{"location":"","page":"ImageDataIO.jl Documentation","title":"ImageDataIO.jl Documentation","text":"The ImageDataIO.jl package contains a collection of functions for reading and writing various types of imaging data in various formats. The package is designed to be used with the Julia programming language. In the context of the ANTSUN pipeline, it serves as the \"glue\" that allows different functions to communicate with each other by saving and loading data from disk; ImageDataIO.jl functions are called throughout the pipeline.","category":"page"},{"location":"","page":"ImageDataIO.jl Documentation","title":"ImageDataIO.jl Documentation","text":"Pages = [\"file.md\", \"shearcorrect.md\", \"nrrdfilter.md\", \"dictionary.md\"]","category":"page"}]
}
